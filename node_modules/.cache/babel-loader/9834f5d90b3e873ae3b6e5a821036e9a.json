{"remainingRequest":"C:\\MEIW_PAW\\MiniProj2\\node_modules\\babel-loader\\lib\\index.js!C:\\MEIW_PAW\\MiniProj2\\node_modules\\eslint-loader\\index.js??ref--14-0!C:\\MEIW_PAW\\MiniProj2\\src\\api\\question.service.js","dependencies":[{"path":"C:\\MEIW_PAW\\MiniProj2\\src\\api\\question.service.js","mtime":1576832059000},{"path":"C:\\MEIW_PAW\\MiniProj2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\MEIW_PAW\\MiniProj2\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\MEIW_PAW\\MiniProj2\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/MEIW_PAW/MiniProj2/src/api/question.service.js"],"names":["API_URL","questionService","getQuestions","token","fetch","method","headers","response","ok","json","Error","handleResponses","status","addQuestion","payload","body","JSON","stringify","editQuestion","_id","removeQuestion","id","code","message"],"mappings":"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","sourcesContent":["import API_URL from './config.js'\n\nexport const questionService = {\n  async getQuestions(token) {\n    const response = await fetch(`${API_URL}/questions`, {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      }\n    });\n    if (response.ok) {\n      return await response.json();\n    } else {\n      throw Error(handleResponses(response.status));\n    }\n  },\n  async addQuestion(token, payload) {\n    const response = await fetch(`${API_URL}/questions`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      },\n      body: JSON.stringify(payload)\n    })\n    if (response.ok) {\n      return await response.json();\n    } else {\n      throw Error(handleResponses(response.status));\n    }\n  },\n  async editQuestion(token, payload) {\n    const response = await fetch(`${API_URL}/questions/${payload._id}`, {\n      method: \"PUT\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      },\n      body: JSON.stringify(payload)\n    });\n    if (response.ok) {\n      return await response.json();\n    } else {\n      throw Error(handleResponses(response.status));\n    }\n  },\n  async removeQuestion(token, id) {\n    const response = await fetch(`${API_URL}/questions/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      }\n    });\n    if (response.ok) {\n      return await response.json();\n    } else {\n      throw Error(handleResponses(response.status));\n    }\n  }\n};\n\nfunction handleResponses(code) {\n  let message = \"\"\n  switch (code) {\n    case 401:\n      message = \"Não está autorizado a executar esta ação!\"\n      break;\n    case 409:\n      message = \"Já existe um utilizador com este username!\"\n      break;\n    default:\n      message = \"Mensagem desconhecida\"\n      break;\n  }\n  return message\n}\n\nexport default questionService;\n"]}]}