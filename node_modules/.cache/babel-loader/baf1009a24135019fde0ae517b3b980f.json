{"remainingRequest":"C:\\MEIW_PAW\\MiniProj2\\node_modules\\babel-loader\\lib\\index.js!C:\\MEIW_PAW\\MiniProj2\\node_modules\\eslint-loader\\index.js??ref--14-0!C:\\MEIW_PAW\\MiniProj2\\src\\store\\questions\\question.module.js","dependencies":[{"path":"C:\\MEIW_PAW\\MiniProj2\\src\\store\\questions\\question.module.js","mtime":1576832059000},{"path":"C:\\MEIW_PAW\\MiniProj2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\MEIW_PAW\\MiniProj2\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\MEIW_PAW\\MiniProj2\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gIkM6XFxNRUlXX1BBV1xcTWluaVByb2oyXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS1jb3JlanMzL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiQzpcXE1FSVdfUEFXXFxNaW5pUHJvajJcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lLWNvcmVqczMvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7Cgp2YXIgX2FjdGlvbnMsIF9tdXRhdGlvbnM7CgppbXBvcnQgcXVlc3Rpb25TZXJ2aWNlIGZyb20gIkAvYXBpL3F1ZXN0aW9uLnNlcnZpY2UiOwppbXBvcnQgeyAvLyBBY3Rpb25zCkZFVENIX1FVRVNUSU9OUywgQUREX1FVRVNUSU9OLCBFRElUX1FVRVNUSU9OLCBSRU1PVkVfUVVFU1RJT04gLy8gTXV0YXRpb25zIAosIFNFVF9RVUVTVElPTlMsIFNFVF9NRVNTQUdFIH0gZnJvbSAiLi9xdWVzdGlvbi5jb25zdGFudHMiOwp2YXIgc3RhdGUgPSB7CiAgcXVlc3Rpb25zOiBbXSwKICBtZXNzYWdlOiAiIgp9Owp2YXIgZ2V0dGVycyA9IHsKICBnZXRRdWVzdGlvbnM6IGZ1bmN0aW9uIGdldFF1ZXN0aW9ucyhzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLnF1ZXN0aW9uczsKICB9LAogIGdldFF1ZXN0aW9uQnlJZDogZnVuY3Rpb24gZ2V0UXVlc3Rpb25CeUlkKHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGlkKSB7CiAgICAgIHJldHVybiBzdGF0ZS5xdWVzdGlvbnMuZmluZChmdW5jdGlvbiAocXVlc3Rpb24pIHsKICAgICAgICByZXR1cm4gcXVlc3Rpb24uX2lkID09PSBpZDsKICAgICAgfSk7CiAgICB9OwogIH0sCiAgZ2V0UXVlc3Rpb25zQnlMZXZlbDogZnVuY3Rpb24gZ2V0UXVlc3Rpb25zQnlMZXZlbChzdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChsZXZlbCkgewogICAgICByZXR1cm4gc3RhdGUucXVlc3Rpb25zLmZpbHRlcihmdW5jdGlvbiAocXVlc3Rpb24pIHsKICAgICAgICByZXR1cm4gcXVlc3Rpb24ubGV2ZWwgPT09IGxldmVsOwogICAgICB9KTsKICAgIH07CiAgfSwKICBnZXRNZXNzYWdlOiBmdW5jdGlvbiBnZXRNZXNzYWdlKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUubWVzc2FnZTsKICB9Cn07CnZhciBhY3Rpb25zID0gKF9hY3Rpb25zID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfYWN0aW9ucywgRkVUQ0hfUVVFU1RJT05TLCBmdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoX3JlZikgewogICAgdmFyIGNvbW1pdCwgcm9vdFN0YXRlOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBjb21taXQgPSBfcmVmLmNvbW1pdCwgcm9vdFN0YXRlID0gX3JlZi5yb290U3RhdGU7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgICBxdWVzdGlvblNlcnZpY2UuZ2V0UXVlc3Rpb25zKHJvb3RTdGF0ZS5hdXRoLnRva2VuKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgICAgICAgIGNvbW1pdChTRVRfUVVFU1RJT05TLCByZXMuYm9keSk7CiAgICAgICAgICAgICAgICByZXNvbHZlKHJlcyk7CiAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgICAgY29tbWl0KFNFVF9NRVNTQUdFLCBlcnIubWVzc2FnZSk7CiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSkpOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiAoX3gpIHsKICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKSksIF9kZWZpbmVQcm9wZXJ0eShfYWN0aW9ucywgQUREX1FVRVNUSU9OLCBmdW5jdGlvbiAoX3JlZjMsIHBheWxvYWQpIHsKICB2YXIgY29tbWl0ID0gX3JlZjMuY29tbWl0LAogICAgICByb290U3RhdGUgPSBfcmVmMy5yb290U3RhdGU7CiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIHF1ZXN0aW9uU2VydmljZS5hZGRRdWVzdGlvbihyb290U3RhdGUuYXV0aC50b2tlbiwgcGF5bG9hZCkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgIGNvbW1pdChTRVRfTUVTU0FHRSwgInN1Y2Vzc28hIik7CiAgICAgIHJlc29sdmUocmVzLmJvZHkpOwogICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICBjb21taXQoU0VUX01FU1NBR0UsIGVyci5tZXNzYWdlKTsKICAgICAgcmVqZWN0KGVycik7CiAgICB9KTsKICB9KTsKfSksIF9kZWZpbmVQcm9wZXJ0eShfYWN0aW9ucywgRURJVF9RVUVTVElPTiwgZnVuY3Rpb24gKF9yZWY0LCBwYXlsb2FkKSB7CiAgdmFyIHJvb3RTdGF0ZSA9IF9yZWY0LnJvb3RTdGF0ZTsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgcXVlc3Rpb25TZXJ2aWNlLmVkaXRRdWVzdGlvbihyb290U3RhdGUuYXV0aC50b2tlbiwgcGF5bG9hZCkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgIHJldHVybiByZXNvbHZlKHJlcyk7CiAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgIHJldHVybiByZWplY3QoZXJyKTsKICAgIH0pOwogIH0pOwp9KSwgX2RlZmluZVByb3BlcnR5KF9hY3Rpb25zLCBSRU1PVkVfUVVFU1RJT04sIGZ1bmN0aW9uIChfcmVmNSwgaWQpIHsKICB2YXIgY29tbWl0ID0gX3JlZjUuY29tbWl0LAogICAgICByb290U3RhdGUgPSBfcmVmNS5yb290U3RhdGU7CiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIHF1ZXN0aW9uU2VydmljZS5yZW1vdmVRdWVzdGlvbihyb290U3RhdGUuYXV0aC50b2tlbiwgaWQpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICBjb21taXQoU0VUX01FU1NBR0UsICJzdWNlc3NvISIpOwogICAgICByZXNvbHZlKHJlcyk7CiAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgIHJldHVybiByZWplY3QoZXJyKTsKICAgIH0pOwogIH0pOwp9KSwgX2FjdGlvbnMpOwpleHBvcnQgdmFyIG11dGF0aW9ucyA9IChfbXV0YXRpb25zID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfbXV0YXRpb25zLCBTRVRfUVVFU1RJT05TLCBmdW5jdGlvbiAoc3RhdGUsIHF1ZXN0aW9ucykgewogIHN0YXRlLnF1ZXN0aW9ucyA9IHF1ZXN0aW9uczsKfSksIF9kZWZpbmVQcm9wZXJ0eShfbXV0YXRpb25zLCBTRVRfTUVTU0FHRSwgZnVuY3Rpb24gKHN0YXRlLCBtZXNzYWdlKSB7CiAgc3RhdGUubWVzc2FnZSA9IG1lc3NhZ2U7Cn0pLCBfbXV0YXRpb25zKTsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWVzcGFjZWQ6IHRydWUsCiAgc3RhdGU6IHN0YXRlLAogIGdldHRlcnM6IGdldHRlcnMsCiAgYWN0aW9uczogYWN0aW9ucywKICBtdXRhdGlvbnM6IG11dGF0aW9ucwp9Ow=="},{"version":3,"sources":["C:/MEIW_PAW/MiniProj2/src/store/questions/question.module.js"],"names":["questionService","FETCH_QUESTIONS","ADD_QUESTION","EDIT_QUESTION","REMOVE_QUESTION","SET_QUESTIONS","SET_MESSAGE","state","questions","message","getters","getQuestions","getQuestionById","id","find","question","_id","getQuestionsByLevel","level","filter","getMessage","actions","commit","rootState","Promise","resolve","reject","auth","token","then","res","body","err","payload","addQuestion","editQuestion","removeQuestion","mutations","namespaced"],"mappings":"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","sourcesContent":["import questionService from \"@/api/question.service\";\nimport { \n  // Actions\n  FETCH_QUESTIONS,\n  ADD_QUESTION,\n  EDIT_QUESTION,\n  REMOVE_QUESTION,\n  // Mutations \n  SET_QUESTIONS,\n  SET_MESSAGE \n} from \"./question.constants\";\n\nconst state = {\n  questions: [],\n  message: \"\"\n};\n\nconst getters = {\n  getQuestions: state => state.questions,\n  getQuestionById: state => id => {\n    return state.questions.find(question => question._id === id)\n  },\n  getQuestionsByLevel: state => level => {\n    return state.questions.filter(question => question.level === level)\n  },\n  getMessage: state => state.message\n};\n\nconst actions = {\n  [FETCH_QUESTIONS]: async ({ commit, rootState }) => {\n    return new Promise((resolve, reject) => {\n      questionService.getQuestions(rootState.auth.token)\n        .then(\n          res => {\n            commit(SET_QUESTIONS, res.body);\n            resolve(res)\n          },\n          err => {\n            commit(SET_MESSAGE, err.message)\n            reject(err)\n          }\n        );\n    });\n  },\n  [ADD_QUESTION]: ({ commit, rootState }, payload) => {\n    return new Promise((resolve, reject) => {\n      questionService.addQuestion(rootState.auth.token, payload)\n        .then(\n          res => {\n            commit(SET_MESSAGE, \"sucesso!\");\n            resolve(res.body) \n          },\n          err => {\n            commit(SET_MESSAGE, err.message)\n            reject(err)\n          }\n        );\n    });\n  },\n  [EDIT_QUESTION]: ({ rootState }, payload) => {\n    return new Promise((resolve, reject) => {\n      questionService.editQuestion(rootState.auth.token, payload)\n        .then(\n          res => resolve(res),\n          err => reject(err)\n        );\n    });\n  },\n  [REMOVE_QUESTION]: ({ commit, rootState }, id) => {\n    return new Promise((resolve, reject) => {\n      questionService.removeQuestion(rootState.auth.token, id)\n        .then(\n          res => {\n            commit(SET_MESSAGE, \"sucesso!\");\n            resolve(res)\n          },\n          err => reject(err)\n        );\n    });\n  }\n};\n\nexport const mutations = {\n  [SET_QUESTIONS]: (state, questions) => {\n    state.questions = questions;\n  },\n  [SET_MESSAGE]: (state, message) => {\n    state.message = message;\n  }\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n}"]}]}